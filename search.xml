<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java-Day-1]]></title>
    <url>%2F2019%2F01%2F16%2FJava-Day-1%2F</url>
    <content type="text"><![CDATA[Java平台生态 java平台由于java语言天然跨平台的特性，使的我们可以很轻松的”Compile once, Run anywhere”。 java的特点 面向对象 分布式 健壮性 安全性 可移植性 高性能 多线程 。。。 由于Java的健壮性、使用方便、跨平台、安全性等特点，已经成为世界上使用最多的编程语言。 java平台蓝图]]></content>
      <categories>
        <category>program language</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven Day 2]]></title>
    <url>%2F2018%2F12%2F21%2FMaven-Day-2%2F</url>
    <content type="text"><![CDATA[Maven进阶：继承和聚合 Maven 聚合当我们的项目模块越来越多的时候，我们就有必要使用一些maven的高级特性了。没错，就是maven聚合。接着我们上一篇的maven day 1,我们在创建好的my-app项目里，创建两个子项目：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556E:\my-app| my-app.iml| pom.xml|+---my-app-a| | my-app-a.iml| | pom.xml| || \---src| +---main| | \---java| | \---com| | \---mycompany| | \---app| | App.java| || \---test| \---java| \---com| \---mycompany| \---app| AppTest.java|+---my-app-b| | my-app-b.iml| | pom.xml| || \---src| +---main| | \---java| | \---com| | \---mycompany| | \---app| | App.java| || \---test| \---java| \---com| \---mycompany| \---app| AppTest.java|\---src +---main | \---java | \---com | \---mycompany | \---app | App.java | \---test \---java \---com \---mycompany \---app AppTest.java 如果你创建的子项目没有问题，你应该可以看到和我上面类似的结构。我们打开my-app父项目中的pom.xml: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- aggregation config 聚合配置--&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;name&gt;my-app&lt;/name&gt; &lt;!-- global properties --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;!--这里配置deploy的时候要推送repo的配置--&gt; &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;id&lt;/id&gt; &lt;name&gt;name&lt;/name&gt; &lt;url&gt;&lt;/url&gt; &lt;/repository&gt; &lt;/distributionManagement&gt; &lt;!--这里配置声明一些公共的依赖(统一管理子模块中依赖的version)--&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;!--这里配置的依赖都会被子模块share--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;$&#123;maven.compiler.source&#125;&lt;/source&gt; &lt;target&gt;$&#123;maven.compiler.target&#125;&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.22.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt; &lt;!--这里是所有的项目子模块--&gt; &lt;modules&gt; &lt;module&gt;my-app-a&lt;/module&gt; &lt;module&gt;my-app-b&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt; 聚合项目里面，我们需要注意以下几点： packaging类型 distributionManagement配置 pluginManagement配置 dependencyManagement modules配置 packaging类型由于我们在使用maven的聚合，所以我们的父项目pom.xml文件里面我们配置packaging类型为pom(主要用于公共的依赖管理)，常用的类型还有jar，war，ear 等 distributionManagement配置distributionManagement元素我们一般在聚合项目里面才会使用。配置这个元素主要为了声明项目deploy时推送的远程repository的位置 pluginManagement配置pluginManagement元素声明了所有子项目build项目公共使用的所有的plugin。pluginManagement是build的子元素 dependencyManagement配置dependencyManagement元素声明了所有子项目的一些公共的依赖。我们使用dependencyManagement元素主要用来统一管理子模块项目中的dependency的version。dependencyManagement元素不会在聚合项目里面和子项目中依赖任何的资源。比如我们在子项目my-app-a中可以这样使用：12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;my-app-a&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;my-app-a&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 我们在my-app-a项目依赖了org.springframework.boot组织下的spring-boot-starter-web模块，但是我们并没有指定该模块的version元素，由于我们my-app-a子项目使用&lt;parent&gt;标签指定了继承的父项目my-app。所以spring-boot-starter-web模块会使用在父项目(my-app)中使用dependencyManagement定义的spring-boot-starter-web模块的version(&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;)。 modules配置该元素也只出现在聚合项目中(一般只要项目的pom.xml文件中有packaging&gt;pom&lt;/packaging&gt;，我们就可以认定它是一个聚合项目)。modules元素表明了该聚合项目中下面共有哪些模块。比如在我们的my-app项目的pom.xml文件中，表明下面子模块有my-app-a和my-app-b。1234&lt;modules&gt; &lt;module&gt;my-app-a&lt;/module&gt; &lt;module&gt;my-app-b&lt;/module&gt; &lt;/modules&gt; Maven 继承和我们所有面向对象的语言一样，maven也是面向对象的。所以我们也可以使用那些高级语言中的特性：继承。 maven继承怎么实现当我们想继承一个项目时，要满足以下几点： 1.继承的super项目中的pom.xml中的packaging元素是pom类型2.使用parent标签元素指向父项目3.super项目中的pom.xml中的modules标签元素中包涵子项目 一旦我们满足了以上几点，那么恭喜你：你已经成功的实现了maven中的继承。 maven都继承哪些元素 groupId:项目组ID,项目坐标的核心元素 version: 项目版本, 项目坐标的核心元素 description: 项目的描述信息 organization: 项目的组织信息 inceptionYear: 项目的创始年份 url: 项目的URL地址 developers: 项目开发者信息 contributors: 项目的贡献者信息 distributionManagement: 项目的部署配置 issueManagement: 项目的缺陷跟踪系统信息 ciManagement: 项目的持续集成系统信息 scm: 项目的版本控制系统信息 mailingLists: 项目的邮件列表信息 properties: 自定义的maven属性 dependencies: 项目的依赖配置 dependencyManagement: 项目的依赖管理配置 repositories: 项目的仓库配置 build: 包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等 reporting: 包括项目的报告输出目录配置、报告插件配置等]]></content>
      <categories>
        <category>project build</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven Day 1]]></title>
    <url>%2F2018%2F12%2F18%2FMaven-Day-1%2F</url>
    <content type="text"><![CDATA[Maven 系统构建和管理的利器 Maven 简介maven是一个用于构建和管理项目的工具 Maven 特点 构建过程简单 统一的构建系统 透明迁移 … Maven 安装安装以及配置略(自行google)。配置好以后，打开命令行运行：1mvn --version 如果配置的没有问题，那么你应该可以看到以下的输出：12345Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T20:41:47+02:00)Maven home: D:\apache-maven-3.6.0\bin\..Java version: 1.8.0_161, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_161\jreDefault locale: nl_NL, platform encoding: Cp1252OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows" Maven 使用我们可以在任何目录下创建一个maven项目。打开命令行运行： 1mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false 然后你应该可以看到一个my-app的文件夹。这个文件夹就是一个标准的maven项目。进入目录： 1cd my-app 我们展开项目的目录结构： 123456789101112131415my-app|-- pom.xml`-- src |-- main | `-- java | `-- com | `-- mycompany | `-- app | `-- App.java `-- test `-- java `-- com `-- mycompany `-- app `-- AppTest.java src/main/java 目录包含项目所有的代码，src/test/java目录包含了所有的测试的代码，pom.xml文件是所有maven项目的一个标志性标识。即Project Object Model（项目对象模型）描述文件。 Maven 生命周期 validate 校验项目是否正确 compile 编译项目所有的代码 test 使用测试框架(junit)测试 package 把所有编译好的代码打成一个指定格式的包 intergration-test 集成测试 verify 验证项目的合法性 install 安装一个指定格式的包到本地仓库 deploy 部署一个指定格式的包到远程仓库]]></content>
      <categories>
        <category>project build</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
