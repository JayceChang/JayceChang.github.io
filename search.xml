<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux-day-2]]></title>
    <url>%2F2019%2F10%2F23%2Flinux-day-2%2F</url>
    <content type="text"><![CDATA[linux系统目录结构 / 目录在linux中 / 表示根目录，我们可以很方便的运行下面的命令切换至根目录并且运行ls命令看一下根目录下面都有哪些目录1234cd /ls 文件系统的是用来组织和排列文件存取的，所以她是可见的，在Linux中，我们可以通过ls等工具来查看其结构，在Linux系统中，我们见到的都是树形结构；比如操作系统安装在一个文件系统中，他表现为由/ 起始的树形结构。linux文件系统的最顶端是/，我们称/为Linux的root，也就是 Linux操作系统的文件系统。Linux的文件系统的入口就是/，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，也是最上级的领导者。 由于linux是开放源代码，各大公司和团体根据linux的核心代码做各自的操作，编程。这样就造成在根下的目录的不同。这样就造成个人不能使用他人的linux系统的PC。因为你根本不知道一些基本的配置，文件在哪里。。。这就造成了混乱。这就是FHS（Filesystem Hierarchy Standard ）机构诞生的原因。该机构是linux爱好者自发的组成的一个团体，主要是是对linux做一些基本的要求，不至于是操作者换一台主机就成了linux的‘文盲’。 根据FHS(http://www.pathname.com/fhs/)的官方文件指出， 他们的主要目的是希望让使用者可以了解到已安装软件通常放置于那个目录下， 所以他们希望独立的软件开发商、操作系统制作者、以及想要维护系统的用户，都能够遵循FHS的标准。 也就是说，FHS的重点在于规范每个特定的目录下应该要放置什么样子的数据而已。 这样做好处非常多，因为Linux操作系统就能够在既有的面貌下(目录架构不变)发展出开发者想要的独特风格。 事实上，FHS是根据过去的经验一直再持续的改版的，FHS依据文件系统使用的频繁与否与是否允许使用者随意更动， 而将目录定义成为四种交互作用的形态，用表格来说有点像底下这样： 可分享的（shareable） 不可分享的（unshareable） 不变的（static） /usr(软件放置位置)/opt(第三方软件) /etc(配置文件)/boot(开机与内核核心) 可变动的（variable） /var/mail(使用者邮件邮箱)/var/spool/news(新闻组) /var/run(程序运行相关)/var/lock(程序运行相关) 根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的， 同时根目录也与开机/还原/系统修复等动作有关。 由于系统开机时需要特定的开机软件、核心文件、开机所需程序、 函式库等等文件数据，若系统出现错误时，根目录也必须要包含有能够修复文件系统的程序才行。 因为根目录是这么的重要，所以在FHS的要求方面，他希望根目录不要放在非常大的分区， 因为越大的分区内你会放入越多的数据，如此一来根目录所在分区就可能会有较多发生错误的机会。 因此FHS标准建议：根目录(/)所在分区应该越小越好， 且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。 如此不但效能较佳，根目录所在的文件系统也较不容易发生问题。说白了，就是根目录和Windows的C盘一个样。 根据以上原因，FHS认为根目录(/)下应该包含如下子目录： 目录 主要放置内容 /bin 系统有很多放置执行文件的目录，但/bin比较特殊。因为/bin放置的是在单人维护模式下还能够被操作的指令。在/bin底下的指令可以被root与一般帐号所使用，主要有：cat,chmod(修改权限), chown, date, mv, mkdir, cp, bash等等常用的指令。bin是Binary的缩写, 这个目录存放着最经常使用的命令。 /boot 主要放置开机会使用到的库函数，包括Linux核心档案以及开机选单与开机所需设定档等等。Linux kernel常用的库名为：vmlinuz ，如果使用的是grub这个开机管理程式，则还会存在/boot/grub/这个目录。 /dev 在Linux系统上，任何设备与周边设备都是以文件的型态存在于这个目录当中。 只要通过存取这个目录下的某个文件，就等于存取某个设备。比要重要的文件有/dev/null, /dev/zero, /dev/tty , /dev/lp, / dev/hd, /dev/sd*等等。dev是Device(设备)的缩写 /etc 系统主要的设定文件几乎都放置在这个目录内，例如人员的帐号密码文件、各种服务的启始文件等等。 一般来说，这个目录下的各文件属性是可以让一般使用者查阅的，但是只有root有权力修改。 FHS建议不要放置可执行文件(binary)在这个目录中。 比较重要的文件有：/etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的目录有：/etc/init.d/ ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话： /etc/init.d/iptables start、/etc/init.d/ iptables stop /home 这是系统预设的使用者主目录(home directory)。 在你新增一个一般使用者帐号时，预设的使用者主目录都会规范到这里来。比较重要的是，主目录有两种代号： ~ ：代表当前使用者的主目录，而 ~guest：则代表用户名为guest的主目录。 /lib 系统的函式库非常的多，而/lib放置的则是在开机时会用到的函式库，以及在/bin或/sbin底下的指令会调用的函式库 。 什么是函式库呢？你可以将他想成是外挂，某些指令必须要有这些外挂才能够顺利完成程式的执行。其作用类似于Windows里的DLL文件。 尤其重要的是/lib/modules/这个目录，因为该目录会放置核心相关的模组(驱动程式)。 /media media是媒体的英文，顾名思义，这个/media底下放置的就是可移除的装置。 包括U盘、DVD等等装置都暂时挂载于此。 常见的档名有：/media/floppy, /media/cdrom等等。 /mnt 如果你想要暂时挂载某些额外的装置，一般建议可以放置到这个目录中。这个目录的用途与/media相同。 只是有了/media之后，这个目录就用来暂时挂载用了。 /opt 如果你想要自行安装额外的软体(非原本的distribution提供的)，那么也能够将你的软体安装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下。 /root 系统管理员(root)的主目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的主目录，所以我们会希望root的主目录与根目录放置在同一个分区中。 /sbin Linux有非常多指令是用来设定系统环境的，这些指令只有root才能够利用来设定系统，其他使用者最多只能用来查询而已。放在/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软体程式，一般则放置到/usr/sbin/当中。至于本机自行安装的软体所产生的系统执行档(system binary)，则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。 /srv srv可以视为service的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在/srv/www/里面。呵呵，看来平时我们编写的代码应该放到这里了。 /tmp 这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊。 因为FHS甚至建议在开机时，应该要将/tmp下的资料都删除。 /lost+found 这个目录是使用标准的ext2/ext3文件系统格式才会产生的一个目录，目的在于当文件系统发生错误时，将一些遗失的片段放置到这个目录下。 这个目录通常会在分割槽的最顶层存在，例如你加装一个硬盘于/disk中，那在这个系统下就会自动产生一个这样的目录/disk/lost+found /proc 这个目录本身是一个虚拟文件系统(virtual filesystem)喔。 他放置的资料都是在内存当中，例如系统核心、进程(process)、周边装置的状态及网络状态等等。因为这个目录下的资料都是在记忆体（内存）当中，所以本身不占任何硬盘空间。比较重要的文件目录有： /proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/*等等。 /sys 这个目录其实跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录与核心相关的信息。 包括目前已载入的核心模组与核心侦测到的硬体装置信息等等。 这个目录同样不占硬盘容量。 /usr 目录依据FHS的基本定义，/usr里面放置的数据属于可分享的与不可变动的(shareable, static)， 如果你知道如何透过网络进行分区的挂载(例如在服务器篇会谈到的NFS服务器)，那么/usr确实可以分享给局域网络内的其他主机来使用喔。 /usr不是user的缩写，其实usr是Unix Software Resource的缩写， 也就是Unix操作系统软件资源所放置的目录，而不是用户的数据啦。这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行建立该软件自己独立的目录。 因为是所有系统默认的软件(distribution发布者提供的软件)都会放置到/usr底下，因此这个目录有点类似Windows 系统的C:\Windows\ + C:\Program files\这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量。 一般来说，/usr的次目录建议有底下这些： 目录 主要放置内容 /usr/bin/ 绝大部分的用户可使用指令都放在这里。 /usr/include/ c/c++等程序语言的文件头(header)与包含文件(include)放置处，当我们以tarball方式 (*.tar.gz 的方式安装软件)安装某些数据时，会使用到里头的许多文件。 /usr/lib/ 包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行文件或脚本(script)。 某些软件会提供一些特殊的指令来进行服务器的设定，这些指令也不会经常被系统管理员操作， 那就会被摆放到这个目录下。要注意的是，如果你使用的是X86_64的Linux系统， 那可能会有/usr/lib64/目录产生 。类型windows系统中的program files或者Program Files (x86)目录。 /usr/local/ 系统管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于/usr/local/目录下，可与原先的旧版软件有分别啦。 你可以自行到/usr/local去看看，该目录下也是具有bin, etc, include, lib…的次目录 /usr/sbin/ 非系统正常运作所需要的系统指令。最常见的就是某些网络服务器软件的服务指令(daemon) /usr/share/ 放置共享文件的地方，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文本文件嘛。在此目录下常见的还有这些次目录：/usr/share/man：联机帮助文件 /usr/src/ 一般原始码建议放置到这里，src有source的意思。至于核心原始码则建议放置到/usr/src/linux/目录下。 /var 目录如果/usr是安装时会占用较大硬盘容量的目录，那么/var就是在系统运作后才会渐渐占用硬盘容量的目录。 因为/var目录主要针对常态性变动的文件，包括缓存(cache)、登录档(log file)以及某些软件运作所产生的文件， 包括程序文件(lock file, run file)，或者例如MySQL数据库的文件等等。常见的次目录有： 目录 主要放置内容 /var/cache/ 应用程序本身运作过程中会产生的一些暂存档 /var/lib/ 程序本身执行的过程中，需要使用到的数据文件放置的目录。在此目录下各自的软件应该要有各自的目录。 举例来说，MySQL的数据库放置到/var/lib/mysql/而rpm的数据库则放到/var/lib/rpm去 /var/lock/ 某些装置或者是文件资源一次只能被一个应用程序所使用，如果同时有两个程序使用该装置时， 就可能产生一些错误的状况，因此就得要将该装置上锁(lock)，以确保该装置只会给单一软件所使用。 /var/log/ 非常重要。这是登录文件放置的目录。里面比较重要的文件如/var/log/messages, /var/log/wtmp(记录登入者的信息)等。 /var/mail/ 放置个人电子邮件信箱的目录，不过这个目录也被放置到/var/spool/mail/目录中，通常这两个目录是互为链接文件。 /var/run/ 某些程序或者是服务启动后，会将他们的PID放置在这个目录下 /var/spool/ 这个目录通常放置一些队列数据，所谓的“队列”就是排队等待其他程序使用的数据。 这些数据被使用后通常都会被删除。举例来说，系统收到新邮件会放置到/var/spool/mail/中， 但使用者收下该邮件后该封信原则上就会被删除。邮件如果暂时寄不出去会被放到/var/spool/mqueue/中， 等到被送出后就被删除。如果是工作cron数据(crontab)，就会被放置到/var/spool/cron/目录中。 由于FHS仅是定义出最上层(/)及次层(/usr, /var)的目录内容应该要放置的文件或目录数据， 因此，在其他次目录层级内，就可以随开发者自行来配置了。 目录树 参考资料：《鸟哥的私房菜》]]></content>
      <categories>
        <category>program language</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux-Day-1]]></title>
    <url>%2F2019%2F10%2F09%2FLinux-Day-1%2F</url>
    <content type="text"><![CDATA[走进Linux linux简介Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。 linux的优点 稳定的系统 Linux基于UNIX的概念开发出来的操作系统。UNIX LIKE系统都具有相似的程序接口和操作方式，稳定与高效率的优点 免费 由于Linux基于GPL协议，任何人都可以获得Linux。不同于UNIX需要负担庞大的版权费用 安全性 Linux由于社区和开发者众多，可以随时获取最新的安全信息、及时更新安全漏洞 多任务，多用户 与Windows的单人多任务不同，Linux系统支持多用户，多任务的工作模式 用户与用户组的规划 Linux划分出了用户组的概念，不同的用户属于不同的用户组。方便管理 良好的可移植性 Linux系统可以运行在不同的计算机架构 linux用途由于Linux的多用户、多任务、高安全性、高可移植等优点，一般应用于服务器端操作系统。通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。也有时用于嵌入式操作系统开发。 linux内核与发行版目前Linux distributions主要区分为两大系统： 使用RPM方式安装软件的系统，比如Red Hat,Fedora,SuSe 使用Debian的dpkg的方式安装软件的系统，比如Debian,Ubuntu,B2D linux现有发行版]]></content>
      <categories>
        <category>program language</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-Day-1]]></title>
    <url>%2F2019%2F01%2F16%2FJava-Day-1%2F</url>
    <content type="text"><![CDATA[Java平台生态 java平台由于java语言天然跨平台的特性，使的我们可以很轻松的”Compile once, Run anywhere”。 java的特点 面向对象 分布式 健壮性 安全性 可移植性 高性能 多线程 由于Java的健壮性、使用方便、跨平台、安全性等特点，已经成为世界上使用最多的编程语言。 java平台蓝图]]></content>
      <categories>
        <category>program language</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven Day 2]]></title>
    <url>%2F2018%2F12%2F21%2FMaven-Day-2%2F</url>
    <content type="text"><![CDATA[Maven进阶：继承和聚合 Maven 聚合当我们的项目模块越来越多的时候，我们就有必要使用一些maven的高级特性了。没错，就是maven聚合。接着我们上一篇的maven day 1,我们在创建好的my-app项目里，创建两个子项目：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556E:\my-app| my-app.iml| pom.xml|+---my-app-a| | my-app-a.iml| | pom.xml| || \---src| +---main| | \---java| | \---com| | \---mycompany| | \---app| | App.java| || \---test| \---java| \---com| \---mycompany| \---app| AppTest.java|+---my-app-b| | my-app-b.iml| | pom.xml| || \---src| +---main| | \---java| | \---com| | \---mycompany| | \---app| | App.java| || \---test| \---java| \---com| \---mycompany| \---app| AppTest.java|\---src +---main | \---java | \---com | \---mycompany | \---app | App.java | \---test \---java \---com \---mycompany \---app AppTest.java 如果你创建的子项目没有问题，你应该可以看到和我上面类似的结构。我们打开my-app父项目中的pom.xml: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- aggregation config 聚合配置--&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;name&gt;my-app&lt;/name&gt; &lt;!-- global properties --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;!--这里配置deploy的时候要推送repo的配置--&gt; &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;id&lt;/id&gt; &lt;name&gt;name&lt;/name&gt; &lt;url&gt;&lt;/url&gt; &lt;/repository&gt; &lt;/distributionManagement&gt; &lt;!--这里配置声明一些公共的依赖(统一管理子模块中依赖的version)--&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;version&gt;1.4.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;!--这里配置的依赖都会被子模块share--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;$&#123;maven.compiler.source&#125;&lt;/source&gt; &lt;target&gt;$&#123;maven.compiler.target&#125;&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.22.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt; &lt;!--这里是所有的项目子模块--&gt; &lt;modules&gt; &lt;module&gt;my-app-a&lt;/module&gt; &lt;module&gt;my-app-b&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt; 聚合项目里面，我们需要注意以下几点： packaging类型 distributionManagement配置 pluginManagement配置 dependencyManagement modules配置 packaging类型由于我们在使用maven的聚合，所以我们的父项目pom.xml文件里面我们配置packaging类型为pom(主要用于公共的依赖管理)，常用的类型还有jar，war，ear 等 distributionManagement配置distributionManagement元素我们一般在聚合项目里面才会使用。配置这个元素主要为了声明项目deploy时推送的远程repository的位置 pluginManagement配置pluginManagement元素声明了所有子项目build项目公共使用的所有的plugin。pluginManagement是build的子元素 dependencyManagement配置dependencyManagement元素声明了所有子项目的一些公共的依赖。我们使用dependencyManagement元素主要用来统一管理子模块项目中的dependency的version。dependencyManagement元素不会在聚合项目里面和子项目中依赖任何的资源。比如我们在子项目my-app-a中可以这样使用：12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;artifactId&gt;my-app&lt;/artifactId&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt; &lt;artifactId&gt;my-app-a&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;my-app-a&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 我们在my-app-a项目依赖了org.springframework.boot组织下的spring-boot-starter-web模块，但是我们并没有指定该模块的version元素，由于我们my-app-a子项目使用&lt;parent&gt;标签指定了继承的父项目my-app。所以spring-boot-starter-web模块会使用在父项目(my-app)中使用dependencyManagement定义的spring-boot-starter-web模块的version(&lt;version&gt;1.4.0.RELEASE&lt;/version&gt;)。 modules配置该元素也只出现在聚合项目中(一般只要项目的pom.xml文件中有packaging&gt;pom&lt;/packaging&gt;，我们就可以认定它是一个聚合项目)。modules元素表明了该聚合项目中下面共有哪些模块。比如在我们的my-app项目的pom.xml文件中，表明下面子模块有my-app-a和my-app-b。1234&lt;modules&gt; &lt;module&gt;my-app-a&lt;/module&gt; &lt;module&gt;my-app-b&lt;/module&gt; &lt;/modules&gt; Maven 继承和我们所有面向对象的语言一样，maven也是面向对象的。所以我们也可以使用那些高级语言中的特性：继承。 maven继承怎么实现当我们想继承一个项目时，要满足以下几点： 1.继承的super项目中的pom.xml中的packaging元素是pom类型2.使用parent标签元素指向父项目3.super项目中的pom.xml中的modules标签元素中包涵子项目 一旦我们满足了以上几点，那么恭喜你：你已经成功的实现了maven中的继承。 maven都继承哪些元素 groupId:项目组ID,项目坐标的核心元素 version: 项目版本, 项目坐标的核心元素 description: 项目的描述信息 organization: 项目的组织信息 inceptionYear: 项目的创始年份 url: 项目的URL地址 developers: 项目开发者信息 contributors: 项目的贡献者信息 distributionManagement: 项目的部署配置 issueManagement: 项目的缺陷跟踪系统信息 ciManagement: 项目的持续集成系统信息 scm: 项目的版本控制系统信息 mailingLists: 项目的邮件列表信息 properties: 自定义的maven属性 dependencies: 项目的依赖配置 dependencyManagement: 项目的依赖管理配置 repositories: 项目的仓库配置 build: 包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等 reporting: 包括项目的报告输出目录配置、报告插件配置等]]></content>
      <categories>
        <category>project build</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven Day 1]]></title>
    <url>%2F2018%2F12%2F18%2FMaven-Day-1%2F</url>
    <content type="text"><![CDATA[Maven 系统构建和管理的利器 Maven 简介maven是一个用于构建和管理项目的工具 Maven 特点 构建过程简单 统一的构建系统 透明迁移 … Maven 安装安装以及配置略(自行google)。配置好以后，打开命令行运行：1mvn --version 如果配置的没有问题，那么你应该可以看到以下的输出：12345Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T20:41:47+02:00)Maven home: D:\apache-maven-3.6.0\bin\..Java version: 1.8.0_161, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_161\jreDefault locale: nl_NL, platform encoding: Cp1252OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows" Maven 使用我们可以在任何目录下创建一个maven项目。打开命令行运行： 1mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false 然后你应该可以看到一个my-app的文件夹。这个文件夹就是一个标准的maven项目。进入目录： 1cd my-app 我们展开项目的目录结构： 123456789101112131415my-app|-- pom.xml`-- src |-- main | `-- java | `-- com | `-- mycompany | `-- app | `-- App.java `-- test `-- java `-- com `-- mycompany `-- app `-- AppTest.java src/main/java 目录包含项目所有的代码，src/test/java目录包含了所有的测试的代码，pom.xml文件是所有maven项目的一个标志性标识。即Project Object Model（项目对象模型）描述文件。 Maven 生命周期 validate 校验项目是否正确 compile 编译项目所有的代码 test 使用测试框架(junit)测试 package 把所有编译好的代码打成一个指定格式的包 intergration-test 集成测试 verify 验证项目的合法性 install 安装一个指定格式的包到本地仓库 deploy 部署一个指定格式的包到远程仓库]]></content>
      <categories>
        <category>project build</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
</search>
